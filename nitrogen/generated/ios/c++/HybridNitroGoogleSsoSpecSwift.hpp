///
/// HybridNitroGoogleSsoSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroGoogleSsoSpec.hpp"

// Forward declaration of `HybridNitroGoogleSsoSpec_cxx` to properly resolve imports.
namespace NitroGoogleSso { class HybridNitroGoogleSsoSpec_cxx; }

// Forward declaration of `NitroGoogleSSOConfig` to properly resolve imports.
namespace margelo::nitro::nitrogooglesso { struct NitroGoogleSSOConfig; }
// Forward declaration of `NitroGoogleUserInfo` to properly resolve imports.
namespace margelo::nitro::nitrogooglesso { struct NitroGoogleUserInfo; }

#include "NitroGoogleSSOConfig.hpp"
#include <optional>
#include <string>
#include <NitroModules/Promise.hpp>
#include "NitroGoogleUserInfo.hpp"

#include "NitroGoogleSso-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrogooglesso {

  /**
   * The C++ part of HybridNitroGoogleSsoSpec_cxx.swift.
   *
   * HybridNitroGoogleSsoSpecSwift (C++) accesses HybridNitroGoogleSsoSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroGoogleSsoSpec_cxx can directly inherit from the C++ class HybridNitroGoogleSsoSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroGoogleSsoSpecSwift: public virtual HybridNitroGoogleSsoSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroGoogleSsoSpecSwift(const NitroGoogleSso::HybridNitroGoogleSsoSpec_cxx& swiftPart):
      HybridObject(HybridNitroGoogleSsoSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroGoogleSso::HybridNitroGoogleSsoSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline void configure(const NitroGoogleSSOConfig& config) override {
      auto __result = _swiftPart.configure(config);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline std::shared_ptr<Promise<std::optional<NitroGoogleUserInfo>>> signIn() override {
      auto __result = _swiftPart.signIn();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::optional<NitroGoogleUserInfo>>> oneTapSignIn() override {
      auto __result = _swiftPart.oneTapSignIn();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> signOut() override {
      auto __result = _swiftPart.signOut();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::optional<NitroGoogleUserInfo>>> getCurrentUser() override {
      auto __result = _swiftPart.getCurrentUser();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroGoogleSso::HybridNitroGoogleSsoSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrogooglesso
