///
/// NitroGoogleUserInfo.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroGoogleUserInfo`, backed by a C++ struct.
 */
public typealias NitroGoogleUserInfo = margelo.nitro.nitrogooglesso.NitroGoogleUserInfo

public extension NitroGoogleUserInfo {
  private typealias bridge = margelo.nitro.nitrogooglesso.bridge.swift

  /**
   * Create a new instance of `NitroGoogleUserInfo`.
   */
  init(email: String, idToken: String, givenName: String?, familyName: String?, phoneNumber: String?, displayName: String?, profilePictureUri: String?) {
    self.init(std.string(email), std.string(idToken), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = givenName {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = familyName {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = phoneNumber {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = displayName {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = profilePictureUri {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }())
  }

  var email: String {
    @inline(__always)
    get {
      return String(self.__email)
    }
    @inline(__always)
    set {
      self.__email = std.string(newValue)
    }
  }
  
  var idToken: String {
    @inline(__always)
    get {
      return String(self.__idToken)
    }
    @inline(__always)
    set {
      self.__idToken = std.string(newValue)
    }
  }
  
  var givenName: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__givenName) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__givenName)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__givenName = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var familyName: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__familyName) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__familyName)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__familyName = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var phoneNumber: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__phoneNumber) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__phoneNumber)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__phoneNumber = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var displayName: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__displayName) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__displayName)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__displayName = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var profilePictureUri: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__profilePictureUri) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__profilePictureUri)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__profilePictureUri = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
