///
/// JHybridNitroGoogleSsoSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroGoogleSsoSpec.hpp"

// Forward declaration of `NitroGoogleUserInfo` to properly resolve imports.
namespace margelo::nitro::nitrogooglesso { struct NitroGoogleUserInfo; }
// Forward declaration of `NitroGoogleSSOConfig` to properly resolve imports.
namespace margelo::nitro::nitrogooglesso { struct NitroGoogleSSOConfig; }

#include <NitroModules/Promise.hpp>
#include <optional>
#include "NitroGoogleUserInfo.hpp"
#include <NitroModules/JPromise.hpp>
#include "JNitroGoogleUserInfo.hpp"
#include <string>
#include "NitroGoogleSSOConfig.hpp"
#include "JNitroGoogleSSOConfig.hpp"
#include <vector>

namespace margelo::nitro::nitrogooglesso {

  jni::local_ref<JHybridNitroGoogleSsoSpec::jhybriddata> JHybridNitroGoogleSsoSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroGoogleSsoSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroGoogleSsoSpec::initHybrid),
    });
  }

  size_t JHybridNitroGoogleSsoSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridNitroGoogleSsoSpec::configure(const NitroGoogleSSOConfig& config) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JNitroGoogleSSOConfig> /* config */)>("configure");
    method(_javaPart, JNitroGoogleSSOConfig::fromCpp(config));
  }
  std::shared_ptr<Promise<std::optional<NitroGoogleUserInfo>>> JHybridNitroGoogleSsoSpec::signIn() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("signIn");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<std::optional<NitroGoogleUserInfo>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JNitroGoogleUserInfo>(__boxedResult);
        __promise->resolve(__result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt);
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridNitroGoogleSsoSpec::signOut() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("signOut");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::optional<NitroGoogleUserInfo>>> JHybridNitroGoogleSsoSpec::getCurrentUser() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("getCurrentUser");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<std::optional<NitroGoogleUserInfo>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JNitroGoogleUserInfo>(__boxedResult);
        __promise->resolve(__result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt);
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::nitrogooglesso
