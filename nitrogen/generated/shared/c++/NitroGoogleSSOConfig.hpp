///
/// NitroGoogleSSOConfig.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>
#include <optional>

namespace margelo::nitro::nitrogooglesso {

  /**
   * A struct which can be represented as a JavaScript object (NitroGoogleSSOConfig).
   */
  struct NitroGoogleSSOConfig {
  public:
    std::optional<std::string> nonce     SWIFT_PRIVATE;
    std::string iosClientId     SWIFT_PRIVATE;
    std::string webClientId     SWIFT_PRIVATE;
    std::optional<std::string> hostedDomain     SWIFT_PRIVATE;

  public:
    NitroGoogleSSOConfig() = default;
    explicit NitroGoogleSSOConfig(std::optional<std::string> nonce, std::string iosClientId, std::string webClientId, std::optional<std::string> hostedDomain): nonce(nonce), iosClientId(iosClientId), webClientId(webClientId), hostedDomain(hostedDomain) {}
  };

} // namespace margelo::nitro::nitrogooglesso

namespace margelo::nitro {

  // C++ NitroGoogleSSOConfig <> JS NitroGoogleSSOConfig (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrogooglesso::NitroGoogleSSOConfig> final {
    static inline margelo::nitro::nitrogooglesso::NitroGoogleSSOConfig fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrogooglesso::NitroGoogleSSOConfig(
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "nonce")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "iosClientId")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "webClientId")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "hostedDomain"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrogooglesso::NitroGoogleSSOConfig& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "nonce", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.nonce));
      obj.setProperty(runtime, "iosClientId", JSIConverter<std::string>::toJSI(runtime, arg.iosClientId));
      obj.setProperty(runtime, "webClientId", JSIConverter<std::string>::toJSI(runtime, arg.webClientId));
      obj.setProperty(runtime, "hostedDomain", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.hostedDomain));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "nonce"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "iosClientId"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "webClientId"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "hostedDomain"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
